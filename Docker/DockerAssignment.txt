Basic Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
Output:
	C:\Users\pilla>docker -v
	Docker version 20.10.8, build 3967b7d

   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
Output:
C:\Users\pilla>docker --help

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "C:\\Users\\pilla\\.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "C:\\Users\\pilla\\.docker\\ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "C:\\Users\\pilla\\.docker\\cert.pem")
      --tlskey string      Path to TLS key file (default
                           "C:\\Users\\pilla\\.docker\\key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  builder     Manage builds
  buildx*     Build with BuildKit (Docker Inc., v0.6.1-docker)
  compose*    Docker Compose (Docker Inc., v2.0.0-rc.1)
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  scan*       Docker Scan (Docker Inc., v0.8.0)
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes
 
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images

Output:
C:\Users\pilla>docker images --help

Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]

List images

Options:
  -a, --all             Show all images (default hides intermediate images)
      --digests         Show digests
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print images using a Go template
      --no-trunc        Don't truncate output
  -q, --quiet           Only show image IDs

	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers
Output:
C:\Users\pilla>docker ps --help

Usage:  docker ps [OPTIONS]

List containers

Options:
  -a, --all             Show all containers (default shows just running)
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print containers using a Go template
  -n, --last int        Show n last created containers (includes all
                        states) (default -1)
  -l, --latest          Show the latest created container (includes all
                        states)
      --no-trunc        Don't truncate output
  -q, --quiet           Only display container IDs
  -s, --size            Display total file sizes

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
Answer:
	C:\Users\pilla>docker pull nginx
	Using default tag: latest
	latest: Pulling from library/nginx
	e1acddbe380c: Already exists
	e21006f71c6f: Pull complete
	f3341cc17e58: Pull complete
	2a53fa598ee2: Pull complete
	12455f71a9b5: Pull complete
	b86f2ba62d17: Pull complete
	Digest: sha256:c37290e20d62e1a62756fd55af0db0dfaccd6a1ac22706d19a09002917f8032b
	Status: Downloaded newer image for nginx:latest
	docker.io/library/nginx:latest

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
Output:
	C:\Users\pilla>docker images
	REPOSITORY   TAG       IMAGE ID       CREATED        SIZE
	nginx        latest    dd34e67e3371   2 weeks ago    133MB

4. Find out the "Full" ImageId of the image that you pulled and write it below.
Output:
	C:\Users\pilla>docker images –q
	dd34e67e3371
	C:\Users\pilla>docker inspect dd34e67e3371
	"Id": "sha256:dd34e67e3371dc2d1328790c3157ee42dfcae74afffd86b297459ed87a98c0fb"
5. Create a container of your image 
Output:
	C:\Users\pilla>docker run -d --name MyNginx -p 8080:80 dd34e67e3371
	535448c524d0643dbfa49d958e0b8c2fd7af58bcc358e1af565b0f64e40a1780
6. List all the running containers
Output:
	C:\Users\pilla>docker ps
	CONTAINER ID   IMAGE          COMMAND                  CREATED              STATUS              PORTS                                   NAMES
	535448c524d0   dd34e67e3371   "/docker-entrypoint.…"   About a minute ago   Up About a minute   0.0.0.0:8080->80/tcp, :::8080->80/tcp   MyNginx
7. List all the running and stopped containers
Output:	C:\Users\pilla>docker ps -aq
	535448c524d0
8. Find out the "Full" containerId of the container and write it below.
Output:
	C:\Users\pilla>docker ps -aq --no-trunc
	535448c524d0643dbfa49d958e0b8c2fd7af58bcc358e1af565b0f64e40a1780	
9. Find out how many image layers are used to build this image.
Output:
	C:\Users\pilla>docker images
REPOSITORY   TAG       IMAGE ID       CREATED        SIZE
couchbase    latest    a47887bb55d9   3 days ago     1.39GB
ubuntu       latest    fb52e22af1b0   3 days ago     72.8MB
node         latest    1016313cda78   7 days ago     907MB
tomee        latest    2feb76ca2772   8 days ago     361MB
redis        latest    ddcca4b8a6f0   2 weeks ago    105MB
nginx        latest    dd34e67e3371   2 weeks ago    133MB
httpd        latest    c8ca530172a8   2 weeks ago    138MB
tomcat       7.0       9dfd74e6bc2f   2 months ago   533MB
	
10. Get the Apache Tomcat 7 server image from the docker hub.
Output:
	C:\Users\pilla>docker pull tomcat:7.0
	7.0: Pulling from library/tomcat
	0bc3020d05f1: Pull complete
	a110e5871660: Pull complete
	83d3c0fa203a: Pull complete
	a8fd09c11b02: Pull complete
	96ebf1506065: Pull complete
	26b72ffca293: Pull complete
	0bffa2ea17aa: Pull complete
	d880cebcc7a6: Pull complete
	d19ab8039b36: Pull complete
	5057492dc495: Pull complete
	Digest: sha256:f7d37d248d0eacec1e5995736234c9c22155626fcb27ea3ead13b9db24e698f7
	Status: Downloaded newer image for tomcat:7.0
	docker.io/library/tomcat:7.0
11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
Output: 
	docker container run -d --name MyTomcat1-p 8083:8080 tomcat:7.0
12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
Output:
	"IPAddress": "172.17.0.2",
13. Which Port it is using?
Output:
	"HostPort": "8083"
14. Try to access the Tomcat's home page from your machine/vm.
Output: Yes did it.
15. What is the disk size of Apache Tomcat image?
Output:
	docker ps --size
	36.6kb
16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
Output:
 "Env": [
                "PATH=/usr/local/tomee/bin:/usr/local/openjdk-11/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "JAVA_HOME=/usr/local/openjdk-11",
                "LANG=C.UTF-8",
                "JAVA_VERSION=11.0.12",
                "GPG_KEYS=223D3A74B068ECA354DC385CE126833F9CF64915     7A2744A8A9AAF063C23EB7868EBE7DBE8D050EEF     82D8419BA697F0E7FB85916EE91287822FDB81B1     9056B710F1E332780DE7AF34CBAEBE39A46C4CA1     A57DAF81C1B69921F4BA8723A8DE0A4DB863A7C1     B7574789F5018690043E6DD9C212662E12F3E1DD     B8B301E6105DF628076BD92C5483E55897ABD9B9     DBCCD103B8B24F86FFAAB025C8BB472CD297D428     F067B8140F5DD80E1D3B5D92318242FE9A0B1183     FAA603D58B1BA4EDF65896D0ED340E0E6D545F97     C92604B0DEC5C62CFF5801E73D4683C24EDC64D1     294A395FFDC9FCF25A7E2BFDCF6FC99C2CC77782",
                "TOMEE_VER=8.0.6",
                "TOMEE_BUILD=webprofile"
            ],
17. Find out which port is exposed for tomcat?
Output: 8083
18. Run multiple conntainers of tomcat on different port and access it's home page.
Output:
	Yes did it.
19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
Output:
C:\Users\pilla>docker pull ubuntu:20.04
20.04: Pulling from library/ubuntu
Digest: sha256:9d6a8699fb5c9c39cf08a0871bd6219f0400981c570894cd8cbea30d3424a31f
Status: Downloaded newer image for ubuntu:20.04
docker.io/library/ubuntu:20.04

C:\Users\pilla>docker pull ubuntu:21.04
21.04: Pulling from library/ubuntu
d7e10407b4d9: Pull complete
Digest: sha256:d5f1676ce05cd3251b583f19dad1793f9ab499baf463e730e494a640d6c77c2c
Status: Downloaded newer image for ubuntu:21.04
docker.io/library/ubuntu:21.04

20. Run the container of ubuntu in attached mode.
Output: C:\Users\pilla>docker run --name Ubuntu1 ubuntu:20.04

21. Run the container of another ubuntu in detached mode.
Output: C:\Users\pilla>docker run -d --name Ubuntu2 ubuntu:21.04

22. Check how many ubuntu containers are running and stopped
Output: Ubuntu 2 is running. Ubuntu1 is stopped.

23. Is the tomcat container running? If no, start one.
Output:
	C:\Users\pilla>docker start MyTomcat
	MyTomcat
24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
Output:
	docker logs MyTomcat
25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
Output:
	C:\Users\pilla>docker start Ubuntu1
	Ubuntu1
26. Login as root user in ubuntu container
Output:
	C:\Users\pilla>docker container run -it --name Ubunut3 -p 8081:8080 ubuntu:latest

27. Create a file with any name in root directory
Output:
	root@3da13c55ea29:/# touch uma.txt
	root@3da13c55ea29:/# ls
	bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  uma.txt  usr  var
28. Install software of your choice in ubuntu container using "apt-get install"
Output:
	root@3da13c55ea29:/# apt-get install git
	Reading package lists... Done
	Building dependency tree
	Reading state information... Done
	Running hooks in /etc/ca-certificates/update.d...
	done.
29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
Output:
	root@3da13c55ea29:/# exit
	exit

	C:\Users\pilla>
30. Check if the ubuntu container is running.
Output: yes it is running.

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
Output:
	C:\Users\pilla>docker container run -it --name Ubunut4 -p 8082:8080 ubuntu:latest

32. Login as a root user
Output:
	root@861f62ba6caf:/#
33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
Output:
	root@861f62ba6caf:/# ls
	bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

	No! File is not visible.
34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
Output:
	Yes it is there.
35. Create an Image out of the existing container.
Output:
	C:\Users\pilla>docker commit 3da13c55ea29 pillaiuma/ubuntu:20.04
	sha256:670cccf1ab5cfdb59b68ce73a7043b2142f8a604385ae392007398aaa8c38349

36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
Output:
	C:\Users\pilla>docker run -it --name Uma pillaiuma/ubuntu:20.04
	root@771eae7f889d:/# ls
	boot  etc   lib    lib64   media  opt   root  sbin  sys  usr  uma.txt
	bin  dev   home  lib32  libx32  mnt    proc  run   srv   tmp  var

37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
Output:
	C:\Users\pilla>docker stop MyTomcat
	MyTomcat

	C:\Users\pilla>docker kill MyTomcat
	MyTomcat

38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a ubuntu container, login into the ubuntu, install nginx, access nginx's home page from the container,
Now, come out of the ubuntu container and replace the existing index.html page of nginx with above index.html page that you created, Now access the nginx server from host machine, it should display the index.html that you have created.

39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q

write atleast 1 command using each option above and prove their concepts as described in the --help.

Output:
C:\Users\pilla>docker images --help
docker images --a //list of all containers
docker images --f //filter 
docker images --q //list of all running containers

Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]

List images

Options:
  -a, --all             Show all images (default hides intermediate images)
      --digests         Show digests
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print images using a Go template
      --no-trunc        Don't truncate output
  -q, --quiet           Only show image IDs

C:\Users\pilla>docker images -a
REPOSITORY         TAG       IMAGE ID       CREATED          SIZE
pillaiuma/ubuntu   20.04     670cccf1ab5c   12 minutes ago   205MB
tomcat             latest    02c2632869e8   2 days ago       685MB
couchbase          latest    a47887bb55d9   3 days ago       1.39GB
ubuntu             21.04     e5ec58a9f549   3 days ago       80MB
ubuntu             20.04     fb52e22af1b0   3 days ago       72.8MB
ubuntu             latest    fb52e22af1b0   3 days ago       72.8MB
node               latest    1016313cda78   7 days ago       907MB
tomee              latest    2feb76ca2772   8 days ago       361MB
redis              latest    ddcca4b8a6f0   2 weeks ago      105MB
nginx              latest    dd34e67e3371   2 weeks ago      133MB
httpd              latest    c8ca530172a8   2 weeks ago      138MB
tomcat             7.0       9dfd74e6bc2f   2 months ago     533MB

40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s

write atleast 1 command using each option above and prove their concepts as described in the --help.

Output:
C:\Users\pilla>docker ps --help

Usage:  docker ps [OPTIONS]

List containers

Options:
  -a, --all             Show all containers (default shows just running)
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print containers using a Go template
  -n, --last int        Show n last created containers (includes all
                        states) (default -1)
  -l, --latest          Show the latest created container (includes all
                        states)
      --no-trunc        Don't truncate output
  -q, --quiet           Only display container IDs
  -s, --size            Display total file sizes

Output:
C:\Users\pilla>docker ps -a
CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS                        PORTS                                               NAMES
6ff80341db5a   tomee           "catalina.sh run"        14 seconds ago   Up 13 seconds                 8080/tcp                                            MyTomcat
bf2ec22c53b4   nginx           "/docker-entrypoint.…"   3 hours ago      Created                                                                           mynginx1
1cf58bd76bb5   nginx           "/docker-entrypoint.…"   3 hours ago      Exited (255) 47 minutes ago   0.0.0.0:87->80/tcp, :::87->80/tcp                   nginx2
d8b6073cc0e2   nginx:latest    "/docker-entrypoint.…"   3 hours ago      Up About a minute             80/tcp, 0.0.0.0:8088->8080/tcp, :::8088->8080/tcp   nginx1
e89ff8088a19   ubuntu:latest   "bash"                   2 days ago       Exited (255) 47 minutes ago   0.0.0.0:89->80/tcp, :::89->80/tcp                   Ubnginx

C:\Users\pilla>docker ps -n -1
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                                               NAMES
6ff80341db5a   tomee          "catalina.sh run"        31 seconds ago   Up 30 seconds   8080/tcp                                            MyTomcat
d8b6073cc0e2   nginx:latest   "/docker-entrypoint.…"   3 hours ago      Up 2 minutes    80/tcp, 0.0.0.0:8088->8080/tcp, :::8088->8080/tcp   nginx1

C:\Users\pilla>docker ps -l
CONTAINER ID   IMAGE     COMMAND             CREATED          STATUS          PORTS      NAMES
6ff80341db5a   tomee     "catalina.sh run"   38 seconds ago   Up 37 seconds   8080/tcp   MyTomcat

C:\Users\pilla>docker ps -q
6ff80341db5a
d8b6073cc0e2

C:\Users\pilla>docker ps -s
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                                               NAMES      SIZE
6ff80341db5a   tomee          "catalina.sh run"        42 seconds ago   Up 41 seconds   8080/tcp                                            MyTomcat   46.7kB (virtual 361MB)
d8b6073cc0e2   nginx:latest   "/docker-entrypoint.…"   3 hours ago      Up 2 minutes    80/tcp, 0.0.0.0:8088->8080/tcp, :::8088->8080/tcp   nginx1     1.09kB (virtual 133MB)


41. Type below command:-
	docker --help

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".


Write some texts below describing the use of "Management Commands".



Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp
2. create
3. export
4. history
5. info
6. login
7. logout
8. rename
9. save
10. stats
11. top

Output:
	1. docker cp demo.txt Ub3:/demo.txt
	2. docker create --name Demo nginx
	3. docker export Demo>latest.tar
	4. docker history ubuntu:20.04
	5. docker info
	6. docker login
	7. docker logout
	8. docker rename Demo hidemo
	9. docker stats -a
	10. docker top MyTomcat

42. Kill all running container in one liner command.
Output:
	docker kill $(docker ps -q)
43. Delete all images in one liner command.
Output:
	docker rmi -f $(docker images -q)
44. Create a simple Dockerfile, build it and run it.
Output:
	C:\Users\pilla\Desktop\DockerFiles>touch Dockerfile
	
	C:\Users\pilla\Desktop\DockerFiles>cat > Dockerfile
	FROM ubuntu
	RUN apt-get update
	CMD ["echo", "Hello World..! from my first docker image"]

Build:	C:\Users\pilla\Desktop\DockerFiles>docker build .
	[+] Building 26.9s (6/6) FINISHED

	C:\Users\pilla\Desktop\DockerFiles>docker images
	REPOSITORY         TAG       IMAGE ID       CREATED          SIZE
	<none>             <none>    dc1c97be0248   56 seconds ago   103MB

Run: 	C:\Users\pilla\Desktop\DockerFiles>docker run dc1c97be0248
	Hello World..! from my first docker image

45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
	1. USER
	2. RUN
	3. ENV
	4. CMD
	5. RUN
	6. ENTRYPOINT
	7. EXPOSE
	8. VOLUME
Output:
	pillai@pillai-VirtualBox:~$ touch Dockerfile
	pillai@pillai-VirtualBox:~$ vim Dockerfile
	pillai@pillai-VirtualBox:~$ cat Dockerfile
	FROM ubuntu
	MAINTAINER Uma
	RUN apt-get update
	ENV text="demo"
	CMD ["Good morning"]
	EXPOSE 5000
	ENTRYPOINT echo "Hello World!"
	VOLUME /file1
	USER root
	pillai@pillai-VirtualBox:~$ sudo docker build -t myfile:1.0 .
	pillai@pillai-VirtualBox:~$ sudo docker run --name myfile1 myfile:1.0
	Hello World!

46. Dockerhub:-
	Find a application you care about on docker hub.
Output:	C:\Users\pilla>docker pull nginx:latest
	latest: Pulling from library/nginx
	a330b6cecb98: Pull complete
	5ef80e6f29b5: Pull complete
	f699b0db74e3: Pull complete
	0f701a34c55e: Pull complete
	3229dce7b89c: Pull complete
	ddb78cb2d047: Pull complete
	Digest: sha256:a05b0cdd4fc1be3b224ba9662ebdf98fe44c09c0c9215b45f84344c12867002e
	Status: Downloaded newer image for nginx:latest
	docker.io/library/nginx:latest

	Launch the container.
Output:	C:\Users\pilla>docker container run -d --name MyNginx -p 8888:8080 nginx
	e20967842a38488c49ae7c3eb96ee4aec56b67d18c97d00388f6eac7cccac69a

	Install another application in it.
Output:	C:\Users\pilla>docker exec -it MyNginx bash
	root@e20967842a38:/# apt-get install java
	Reading package lists... Done
	Building dependency tree
	Reading state information... Done
	E: Unable to locate package java
	root@e20967842a38:/# exit
	exit

	Save (commit) the image.
Output:	C:\Users\pilla>docker commit e20967842a38 pillaiuma/nginx:latest
	sha256:7ae8cc32630d35f6f12137f3af48662aa4c1cdf58463c0c9fbe895650c9f1380

	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.
Output:	C:\Users\pilla>docker push pillaiuma/nginx
Using default tag: latest
The push refers to repository [docker.io/pillaiuma/nginx]
3c8726e12f6b: Pushed
d47e4d19ddec: Pushed
8e58314e4a4f: Pushed
ed94af62a494: Pushed

------------------------------------------------------------------------------------------------------------------------------------

Advanced Assignment:-

Assignment - Dockers and Containers

---Introduction
The goal of this assignment is to get you familiarized with dockers. You will learn about how to dockerize any application by building a simple client and server containers using dockers.

---What is to be done?
You will be building two containers using docker. These containers can be built starting from an official base image. Official Images has a list of different official base images. Start from the image that is suitable for you.

---Server :
Create a volume by name "servervol".
The server container will mount "servervol" in "/serverdata".
This container runs a server application which will create a file of size 1KB with random text data in "/serverdata" and then transfer the file to the client along with the checksum.
The server application itself can be built using any language you are comfortable with. But, the container should include all the packages that are required to run your application. Choose your base image wisely and install only the necessary packages.
The port on which the server runs must be specified as a command line argument when we run docker.

---Client:
Create a volume by name "clientvol".
The client container will mount "clientvol" in "/clientdata".
The client container runs an application that connects to the server, recieves the file that the server sends and saves it in "/clientdata".
Verify that the file is received properly at the clientside by verifying the checksum.
The client application again can be wriiten in any language that you are comfortable with, but the container should include all the necessary packages. Choose your base image wisely and install only necessary packages.
You need to create a user-defined network in docker and run both these containers on the network created. The containers should run these applications by default (i.e, on run command). Mention in README as to what should be done to get into the container shell instead of running the applications by default (i.e, on run command).

NOTE: You should be able to get into the shell of the client container to physically check if the file has been recieved.

---What to submit?
Create a new empty branch in your git repos named "assignment2".
You will be submitting the files that you use to build the server and client containers. Checkout the assignment2 branch and submit the files related to server and client in two folders named "server" and "client" respectively.
As you go about doing the assignment, you will learn that there are multiple ways to create volumes and to have the containers communicate to each other. So submit a README file that expains what method you use.
Create two scripts. one for the server("fileserver.sh") and the other for the client ("fileclient.sh") that has all the commands to build and run server and client containers respectively. These scripts should include the volume creation for client and server respectively. The server script should also include the creation of user-defined network before server runs.
The scripts and the README should be in the root of your branch (outside your server and client directories).

---What is tested?

Run the "fileserver.sh" script on one terminal. It should create the user-defined network, the "servervol", start the server and wait for the client connection.
Run "fileclient.sh" in another terminal. This script should find out the server's IP, create the "clientvol" and run the client container by specifying server's IP and port as command line parameters.
When the client container is run, a connection between the server and client is established and the file is transferred from the server to the client.
Your code and scripts will be tested on creation of volumes, proper running of server and client and file transfer.
You should make sure that the server can transfer any file with random text and the checksum verification succeeds on the client when it receives the file.


---Grade Distribution

Build and run server container - 30 points
Build and run client container - 30 points
Proper communication between the two - 15 points
Scripts to run the containers - 15 points
README file - 10 points
------------------------------------------------------------------------------------------------------------------------------------
Advanced Assignment 2
---Introduction
The goal of this assignment is to get you familiarized with CI-CD Pipeline for Creating docker images after successfull build.


You already built 2 app(client and server) from the "Part 1" Assignment.


NOTE: You should be able to get the docker image for both Client and Server after successfull build using Jenkins Pipeline.


Your Client app and Server app must be in the github.
Whenever developer commits changes to client/server app in github, it should trigger a build on Jenkins.
Jenkins Pipeline should do maven clean and package
Jenkins Pipeline should also do the static-code analysis using (checkstyle/sonarqube)
Jenkins pipeline at the end should create docker image
On build failure, Jenkins pipeline should send an email to any emailId about the failure.



---Grade Distribution

Proper Build trigger - 20 points
Proper Declarative Jenkins file - 20 points
Clean, Package and Code Analysis - 20 points
Creating docker image on successful build - 20 points
Sending email on build failure - 20 points

